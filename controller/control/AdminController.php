<?php

namespace controller\control;

use comboModel\UserPeer;
use core\App;
use core\Controller;
use model\Role;
use model\User;
use model\Warning;
use model\Web;
use core\Response;

class AdminController extends Controller
{
    public function editRoleAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->peer->owner_id != $this->user->id) {
            $response->message = '–í—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–µ—Å–µ–¥—ã!';
            return $response;
        }
        $user = $this->getUserFromMessage($username, $object);
        if ($user === false) {
            $response->message = '–Ø –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            return $response;
        }
        $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
        if ($userPeer === false) {
            $response->message = '–Ø –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            return $response;
        }
        $mainRole = Role::findById($userPeer->role_id);
        $response->message = "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $mainRole->title" . PHP_EOL . PHP_EOL;
        $response->message .= "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:";
        $roles = Role::findAllToChange($this->peer->owner_id);
        foreach ($roles as $role) {
            if ($mainRole->id != $role['id']) {
                $response->setButtonRow(["–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ {$role['title']}", "edit_user_role {$role['id']} $userPeer->user_id"]);
            }
        }
        return $response;
    }

    public function changeUserRoleAction($role_id, $user_id)
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $role = Role::findById(intval($role_id));
        if ($role === false) {
            $response->message = '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –µ–µ —É–¥–∞–ª–∏–ª–∏';
            return $response;
        }
        $userPeer = UserPeer::findsByPeerAndUser(intval($user_id), $this->peer->id);
        if ($userPeer === false) {
            $response->message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
            return $response;
        }
        $userPeer->role_id = $role->id;
        $userPeer->save();
        $response->message = '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞!';
        return $response;
    }

    public function MutePeerAction($time): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->haveAccess(Role::MUTE_ACCESS)) {
            if ($this->peer->MutePeer == 0) {
                if ($time > 0) {
                    $this->peer->MutePeer = 1;
//                        $this->peer->TimeMute = time(); //–î–æ–±–∞–≤—å –≤ –±–¥ —ç—Ç–æ –ø–æ–ª–µ
                    $this->peer->save();
                    $second = $time % 60;
                    $minutes = floor($time / 60);
                    $hours = floor($time / 3600);
                    $minute = $minutes - $hours * 60;
                    if ($time < 60)
                        $this->vk->messagesSend($this->peer->id, "–í –±–µ—Å–µ–¥–µ –æ–±—ä—è–≤–ª–µ–Ω —Ç–∏—Ö–∏–π —á–∞—Å –Ω–∞ $second c–µ–∫—É–Ω–¥. –õ–∏—à—å –∏–º–µ—é—â–∏–µ –¥–æ—Å—Ç—É–ø –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –∫–∏–∫–Ω—É—Ç—ã –∑–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ....");
                    if ($time >= 60 && $time < 3600)
                        $this->vk->messagesSend($this->peer->id, "–í –±–µ—Å–µ–¥–µ –æ–±—ä—è–≤–ª–µ–Ω —Ç–∏—Ö–∏–π —á–∞—Å –Ω–∞ $minutes –º–∏–Ω—É—Ç $second —Å–µ–∫—É–Ω–¥. –õ–∏—à—å –∏–º–µ—é—â–∏–µ –¥–æ—Å—Ç—É–ø –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –∫–∏–∫–Ω—É—Ç—ã –∑–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ....");
                    elseif ($time >= 3600)
                        $this->vk->messagesSend($this->peer->id, "–í –±–µ—Å–µ–¥–µ –æ–±—ä—è–≤–ª–µ–Ω —Ç–∏—Ö–∏–π —á–∞—Å –Ω–∞ $hours —á–∞—Å–æ–≤ $minute –º–∏–Ω—É—Ç $second —Å–µ–∫—É–Ω–¥. –õ–∏—à—å –∏–º–µ—é—â–∏–µ –¥–æ—Å—Ç—É–ø –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—Ç –∫–∏–∫–Ω—É—Ç—ã –∑–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ....");
//                    $this->userPeer->createCallback("–í –±–µ—Å–µ–¥–µ —Å–Ω—è—Ç —Ç–∏—Ö–∏–π —á–∞—Å. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è.", $this->peer->id, time() + intval($user_text));
                    $this->userPeer->createCallback('unmutePeer', time() + intval($time));
                } else
                    $response->message = "–û—Ç—Ä–∏–∞—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ 0 –Ω–µ–ª—å–∑—è. –ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–±—ä—è–≤–∏—Ç—å —Ç–∏—à–∏–Ω—É –≤ –±–µ—Å–µ–¥–µ?"
                        . PHP_EOL . "1 –º–∏–Ω—É—Ç–∞ = 60"
                        . PHP_EOL . "10 –º–∏–Ω—É—Ç = 600"
                        . PHP_EOL . "1 —á–∞—Å = 3600";
            } else
                $response->message = "–í –±–µ—Å–µ–¥–µ –∏—Ç–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω —Ç–∏—Ö–∏–π —á–∞–π. –û–Ω –±—É–¥–µ—Ç —Å–Ω—è—Ç —á–µ—Ä–µ–∑ %Value%"; //–î–æ–±–∞–≤—å –≤ –±–¥—à–∫—É –ø–æ–ª–µ –≤—ã—à–µ
        } else
            $response->message = "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function MutePeerRemoveAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->haveAccess(Role::MUTE_ACCESS)) {
            if ($this->peer->MutePeer == 1 ) {
                $this->peer->MutePeer = 0;
                $this->peer->save();
                $response->message = "–í –±–µ—Å–µ–¥–µ —Å–Ω—è—Ç —Ç–∏—Ö–∏–π —á–∞—Å. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–Ω–æ–≤–∞ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è.";
            } else
                $response->message= "–í –±–µ—Å–µ–¥–µ –Ω–µ—Ç –º—É—Ç–∞, –º–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—è.";
        } else
            $response->message = "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function findAdminsByWebAction(): Response //TODO: –Ω–∞—Ö—É—è?
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $web = new Web($this->peer->web_id);
        $peers = $web->getPeersIds();
        $needs = [];
        $result = [];
        $allUser = [];
        $users = UserPeer::SelectUsers($this->peer->id);
        if ($this->user->is_dev == 1 || $web->owner_id == $this->user->id) {
            foreach ($peers as $peer) {
                foreach ($users as $item) {
                    array_push($allUser, $item['user_id']);
                }
                $number = 0;
                while ($number != count($result)) {
                    $user = new User($result[$number]);
                    if (!in_array($user->id, $allUser)) {
                        if (!in_array($user->id, $needs)) {
                            array_push($needs, $user->id);
                        }
                    }
                    $number++;
                }
            }
            if (count($needs) != 0) {
                $message = $this->render('admin/needs_admin', [
                    'admins' => $needs,
                    'allCount' => count($result),
                    'count' => count($needs)
                ]);
                $response->message = $message;
            } else
                $response->message = "–í—Å–µ –∞–¥–º–∏–Ω—ã —Å–µ—Ç–∫–∏ —É–∂–µ –≤ –±–µ—Å–µ–¥–µ.";
        } else
            $response->message = "–í—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏.";
        return $response;
    }

    public function AdministrationAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'id - —á–µ–ª–æ–≤–µ–∫(—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –¥–æ–º–µ–Ω), –≤—Å—ë –ø–∏—à–µ—Ç—Å—è –±–µ–∑ —Å–∫–æ–±–æ–∫.'
                . PHP_EOL . 'üòàüòà–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
                . PHP_EOL . '1. –ë–∞–Ω [id]'
                . PHP_EOL . '2. -–ë–∞–Ω [id]'
                . PHP_EOL . '3. –ö–∏–∫ [id]'
                . PHP_EOL . '4. –ü—Ä–µ–¥ [id]'
                . PHP_EOL . '5. -–ü—Ä–µ–¥ [id]'
                . PHP_EOL . '6. –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'
                . PHP_EOL . '7. –ê–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å [id]'
                . PHP_EOL . '8. –ü—Ä–µ–¥—ã'
                . PHP_EOL . '9. –ù–µ–∞–∫—Ç–∏–≤'
                . PHP_EOL . '10. –ê–¥–º–∏–Ω—ã –±–µ—Å–µ–¥—ã'
                . PHP_EOL . '11. –ú–æ–ª—á—É–Ω—ã'
                . PHP_EOL . '12. –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ [–Ω–æ–º–µ—Ä] [text]'
                . PHP_EOL . '13. –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤'
                . PHP_EOL . '14. –ü–æ–Ω–∏–∑–∏—Ç—å [id]'
                . PHP_EOL . '15. –ü–æ–≤—ã—Å–∏—Ç—å [id]'
                . PHP_EOL . '16. –†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å'
                . PHP_EOL . '17. –ü—Ä–∞–≤–∏–ª–∞/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'
                . PHP_EOL . '18. –ü—Ä–∞–≤–∏–ª–∞/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç—å'
                . PHP_EOL . '19. –ü—Ä–∞–≤–∏–ª–∞/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å [text]';
            $response->setButtonRow(['–ë–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–∞', '1'], ['–ö–∏–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞', '2']);
            $response->setButtonRow(['–ü—Ä–µ–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–∞', '3'], ['–ö–æ–ª-–≤–æ –ø—Ä–µ–¥–æ–≤', '4']);
            $response->setButtonRow(['–ù–∞–∑–∞–¥', '0']);
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function ProfileAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'id - —á–µ–ª–æ–≤–µ–∫(—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –¥–æ–º–µ–Ω), text - —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞, | - –∏–ª–∏'
                . PHP_EOL . '‚ù§‚ù§–†–∞–±–æ—Ç–∞ —Å–æ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º'
                . PHP_EOL . '1. –ù–∏–∫ [text]'
                . PHP_EOL . '2. –ó–Ω–∞—á–æ–∫  [—ç–º–æ–¥–∂–∏]'
                . PHP_EOL . '3. –ü—Ä–æ—Ñ–∏–ª—å [id] | –º–æ–π';
            $response->setButton('–ù–∞–∑–∞–¥', '0');
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function PeerAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'id - –∞–π–¥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ'
                . PHP_EOL . '‚úâ‚úâ–†–∞–±–æ—Ç–∞ —Å –±–µ—Å–µ–¥–æ–π‚úâ‚úâ'
                . PHP_EOL . '1. –ë–µ—Å–µ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'
                . PHP_EOL . '2. –ë–µ—Å–µ–¥–∞ –æ–±–Ω–æ–≤–∏—Ç—å'
                . PHP_EOL . '3. –ë–µ—Å–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
                . PHP_EOL . '4. –ë–µ—Å–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ [id] [—Å–æ—Å—Ç–æ—è–Ω–∏–µ]'
                . PHP_EOL . '5. –ß–∞—Ç—Å—Å—ã–ª–∫–∞'
                . PHP_EOL . '6. –ö–∏–∫ —Å–æ–±–∞–∫'
                . PHP_EOL . '7. –ö–∏–∫ –≤—ã—à–µ–¥—à–∏—Ö'
                . PHP_EOL . '8. –ö–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤ –•, –≥–¥–µ –• - –¥–Ω–∏'
                . PHP_EOL . '9. +–∞–≤—Ç–æ–∫–∏–∫ –∏–ª–∏ -–∞–≤—Ç–æ–∫–∏–∫'
                . PHP_EOL . '10. –ë–µ—Å–µ–¥–∞ –∏–Ω—Ñ–æ'
                . PHP_EOL . '11. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'
                . PHP_EOL . '12. –ü—Ä–∞–≤–∏–ª–∞'
                . PHP_EOL . '13. –ë–µ—Å–µ–¥–∞ –º—É—Ç [—á–∏—Å–ª–æ]'
                . PHP_EOL . '14. –ë–µ—Å–µ–¥–∞ -–º—É—Ç';
            $response->setButtonRow(['–ë–µ—Å–µ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', '1'], ['–ë–µ—Å–µ–¥–∞ –æ–±–Ω–æ–≤–∏—Ç—å', '2']);
            $response->setButtonRow(['–ë–µ—Å–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '3'], ['–ß–∞—Ç—Å—Å—ã–ª–∫–∞', '4']);
            $response->setButtonRow(['–ö–∏–∫ —Å–æ–±–∞—á–µ–∫', '5'], ['–ö–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤', '6']);
            $response->setButtonRow(['+–∞–≤—Ç–æ–∫–∏–∫', '7'], ['-–∞–≤—Ç–æ–∫–∏–∫', '8']);
            $response->setButtonRow(['–ù–∞–∑–∞–¥', '0']);
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function WebAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'id - –∞–π–¥–∏ —Å–µ—Ç–∫–∏, text - —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ'
                . PHP_EOL . 'üì∂üì∂–†–∞–±–æ—Ç–∞ —Å —Å–µ—Ç–∫–æ–π –±–µ—Å–µ–¥'
                . PHP_EOL . '1. –°–µ—Ç–∫–∞ —Å–ø–∏—Å–æ–∫'
                . PHP_EOL . '2. –°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å [text]'
                . PHP_EOL . '3. –°–µ—Ç–∫–∞ —Ç–µ–∫—É—â–∞—è'
                . PHP_EOL . '4. –°–µ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
                . PHP_EOL . '5. –°–µ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ [id] [—Å–æ—Å—Ç–æ—è–Ω–∏–µ]'
                . PHP_EOL . '6. –°–µ—Ç–∫–∞ —Ç–æ–ø'
                . PHP_EOL . '7. –°–µ—Ç–∫–∞ —Ç–æ–ø –¥–Ω—è/–Ω–µ–¥–µ–ª–∏'
                . PHP_EOL . '8. –°–µ—Ç–∫–∞ —Ç–æ–ø –±–µ—Å–µ–¥'
                . PHP_EOL . '9. –°–µ—Ç–∫–∞ —Ç–æ–ø –±–µ—Å–µ–¥ –¥–Ω—è/–Ω–µ–¥–µ–ª–∏'
                . PHP_EOL . '10. –°–µ—Ç–∫–∞ –∏–Ω—Ñ–æ'
                . PHP_EOL . '11. –°–µ—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å [id]';
            $response->setButtonRow(['–°–µ—Ç–∫–∞ —Å–ø–∏—Å–æ–∫', '1'], ['–°–µ—Ç–∫–∞ —Ç–µ–∫—É—â–∞—è', '2']);
            $response->setButtonRow(['–°–µ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '3'], ['–°–µ—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å', '4']);
            $response->setButtonRow(['–ù–∞–∑–∞–¥', '0']);
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function CommandsAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'text - —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞, –ø–µ—Ä–µ—Å–ª–∞—Ç—å - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º/–≤–ª–æ–∂–µ–Ω–∏–µ–º'
                . PHP_EOL . 'üòíüòí–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã'
                . PHP_EOL . '1. –î–µ–π—Å—Ç–≤–∏—è'
                . PHP_EOL . '2. –ë–æ—Ç —É–≤–µ–¥'
                . PHP_EOL . '3. –ë–æ—Ç -—É–≤–µ–¥'
                . PHP_EOL . '4. –û–Ω–ª–∞–π–Ω'
                . PHP_EOL . '5. –ë—Ä–∞–∫'
                . PHP_EOL . '6. -–ë—Ä–∞–∫'
                . PHP_EOL . '7. –ú–æ–∏ –¥–µ—Ç–∏'
                . PHP_EOL . '8. –ú–æ–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏'
                . PHP_EOL . '9. –ú–æ–π –±—Ä–∞–∫'
                . PHP_EOL . '10. –£—Å—ã–Ω–æ–≤–∏—Ç—å'
                . PHP_EOL . '11. –£–¥–æ—á–µ—Ä–∏—Ç—å'
                . PHP_EOL . '12. –ó–∞–ª —Å–ª–∞–≤—ã'
                . PHP_EOL . '13. –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞—Ç—å [text] (–ø–µ—Ä–µ—Å–ª–∞—Ç—å)'
                . PHP_EOL . '14. –¢—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª–∏—Ç—å [text]'
                . PHP_EOL . '15. –¢—Ä–∏–≥–≥–µ—Ä—ã'
                . PHP_EOL . '16. –ù–æ–≤–æ—Å—Ç–∏'
                . PHP_EOL . '17. –ù–∞–π–¥–∏ {text}'
                . PHP_EOL . '18. –ë–∏—Ä–∂–∞'
                . PHP_EOL . '19. –¢–æ–ø (—É—Ä–æ–≤–Ω–µ–π, –¥–Ω—è, –Ω–µ–¥–µ–ª–∏)'
                . PHP_EOL . '20. –®–∏–ø–ø–µ—Ä–∏–º'
                . PHP_EOL . '21. –ù–∏–∫–∏';
            $response->setButton('–ù–∞–∑–∞–¥', '0');
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function RpCommandsAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã"
                . PHP_EOL . 'üíòüíò–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –∫–µ–º-—Ç–æ: '
                . PHP_EOL . '–ê—Ä–µ—Å—Ç–æ–≤–∞—Ç—å'
                . PHP_EOL . '–í–æ—Å–∫—Ä–µ—Å–∏—Ç—å'
                . PHP_EOL . '–í–∑—è—Ç—å'
                . PHP_EOL . '–ó–∞–¥—É—à–∏—Ç—å'
                . PHP_EOL . '–∏ –¥—Ä....'
                . PHP_EOL . 'üíîüíî–°–ø–∏—Å–æ–∫ —Å–æ–ª–æ –∫–æ–º–∞–Ω–¥:'
                . PHP_EOL . '–í—ã–ø–∏—Ç—å'
                . PHP_EOL . '–í–æ—Å–∫—Ä–µ—Å–Ω—É—Ç—å'
                . PHP_EOL . '–ó–∞–≥—Ä—É—Å—Ç–∏—Ç—å'
                . PHP_EOL . '–û–¥–µ—Ç—å—Å—è'
                . PHP_EOL . '–∏ –¥—Ä....';
            $response->setButton('–ù–∞–∑–∞–¥', '0');
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function ClansAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'id - —á–µ–ª–æ–≤–µ–∫(—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –¥–æ–º–µ–Ω), text - —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞'
                . PHP_EOL . "–ú–æ–¥—É–ª—å –∫–ª–∞–Ω—ã"
                . PHP_EOL . '1. –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω [text]'
                . PHP_EOL . '2. –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω'
                . PHP_EOL . '3. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω [id]'
                . PHP_EOL . '4. –í—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞'
                . PHP_EOL . '5. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞'
                . PHP_EOL . '6. –ö–ª–∞–Ω –∑–Ω–∞—á–æ–∫ [—ç–º–æ–¥–∂–∏]'
                . PHP_EOL . '7. –ö–ª–∞–Ω –∫–∏–∫ [id]'
                . PHP_EOL . '8. –ö–ª–∞–Ω –º–æ–π'
                . PHP_EOL . '9. –¢–æ–ø –∫–ª–∞–Ω–æ–≤'
                . PHP_EOL . '10. –ö–ª–∞–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ [text]';
            $response->setButton('–ù–∞–∑–∞–¥', '0');
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function GamesAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = 'id - —á–µ–ª–æ–≤–µ–∫ (–æ—Ç–≤–µ—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –¥–æ–º–µ–Ω)'
                . PHP_EOL . "–¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:"
                . PHP_EOL . "1. –í–∏—Å–µ–ª–∏—Ü–∞ - –±–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ç–µ–º—É –∏ –¥–∞—ë—Ç –≤–∞–º 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Ç–æ —á—Ç–æ–± —É–≥–∞–¥–∞—Ç—å –µ–≥–æ."
                . PHP_EOL . "1.1. –ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç –≤–∏—Å–µ–ª–∏—Ü–∞"
                . PHP_EOL . "1.2. –ò–≥—Ä–∞ –≤–∏—Å–µ–ª–∏—Ü–∞ '–±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –∞'"
                . PHP_EOL . "1.3. –°–ª–æ–≤–æ '–Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ'"
                . PHP_EOL . "1.4. –ò–≥—Ä–∞ —Å—Ç–æ–ø –≤–∏—Å–µ–ª–∏—Ü–∞"
                . PHP_EOL . "2. –î—É—ç–ª—å [id] - –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏ –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª—ã, –ø–æ–∫–∞ –∫–æ–≥–æ-—Ç–æ –Ω–µ —É–±—å—é—Ç."
                . PHP_EOL . "2.1. –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å - +n% –∫ —à–∞–Ω—Å—É —Ç–æ–≥–æ —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —É–±—å—ë—Ç —Å–ª–µ–¥—É—é—â–∏–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º"
                . PHP_EOL . "2.2. –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –≤ –≤–æ–∑–¥—É—Ö - -n% –∫ —à–∞–Ω—Å—É —Ç–æ–≥–æ —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —É–±—å—ë—Ç —Å–ª–µ–¥—É—é—â–∏–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º"
                . PHP_EOL . "P.S –ß—Ç–æ–±—ã –∏—Ö –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [id91737880|–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞].";
            $response->setButton('–ù–∞–∑–∞–¥', '0');
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function ModuleAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $response->message = "–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –∏–º–µ–ª–∏ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π? –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏."
                . PHP_EOL . "1) –ê–¥–º–∏–Ω–∫–∞"
                . PHP_EOL . "2) –£—á–∞—Å—Ç–Ω–∏–∫"
                . PHP_EOL . "3) –ë–µ—Å–µ–¥–∞"
                . PHP_EOL . "4) –°–µ—Ç–∫–∞"
                . PHP_EOL . "5) –ö–æ–º–∞–Ω–¥—ã"
                . PHP_EOL . "6) –†–ø –∫–æ–º–∞–Ω–¥—ã (–¥–µ–π—Å—Ç–≤–∏—è)"
                . PHP_EOL . "7) –ö–ª–∞–Ω—ã"
                . PHP_EOL . "8) –ò–≥—Ä—ã"
                . PHP_EOL . "E—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –∏–ª–∏ –∏–º–µ—é—Ç—Å—è –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º: "
                . PHP_EOL . "1. [hironori|–ù–∏–∫–æ–ª–∞–π] (–û—Ç–≤–µ—á—É –≤—Å–µ–º, team lead bot developer)"
                . PHP_EOL . "2. [eoremic|–ê–Ω—Ç–æ–Ω] (–í —Å–µ—Ç–∏ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞, middle bot developer)";
            $response->setButtonRow(['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', '1'], ['–£—á–∞—Å—Ç–Ω–∏–∫', '2']);
            $response->setButtonRow(['–ë–µ—Å–µ–¥–∞', '3'], ['–°–µ—Ç–∫–∞', '4']);
            $response->setButtonRow(['–ö–æ–º–∞–Ω–¥—ã', '5'], ['–î–µ–π—Å—Ç–≤–∏—è', '6']);
            $response->setButtonRow(['–ö–ª–∞–Ω—ã', '7'], ['–ò–≥—Ä—ã', '8']);
        } else
            $response->message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –ü–æ–º–æ—â—å.";
        return $response;
    }

    public function TotalAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        if ($this->user->is_dev == 1) {
            if ($user !== false) {
                $user->black_list = 1;
                $user->save();
                $this->vk->messagesSend($this->peer->id, "[id$user->id|$user->first_name_nom] –ø–æ–ª—É—á–∏–ª –¢–æ—Ç–∞–ª–ß—Å. –ë–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã.");
            } else
                $response->message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ç–æ—Ç–∞–ª.";
        }
        return $response;
    }

    public function RemoveTotalAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        if ($this->user->is_dev == 1) {
            if ($user !== false) {
                $user->black_list = 0;
                $user->save();
                $this->vk->messagesSend($this->peer->id, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω—è—Ç –¢–æ—Ç–∞–ª–ß—Å.');
            }
        }
        return $response;
    }

    public function warningAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
        if ($user->id == $this->user->id) {
            $response->message = "–ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ.";
            return $response;
        }
        if ($user->is_dev == 1) {
            $response->message = "–ù–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞.";
            return $response;
        }
        if ($userPeer->haveAccess(Role::IMMUNE_ACCESS)) {
            $response->message = "–ù–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏–º–µ—é—â–µ–º—É –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∫–æ–º–∞–Ω–¥–∞–º.";
            return $response;
        }
        if ($this->userPeer->haveAccess(Role::PRED_ACCESS) || ($this->user->is_dev == 1)) {
            if ($user !== false) {
                $warning = new Warning();
                $warning->peer_id = $userPeer->peer_id;
                $warning->user_id = $userPeer->user_id;
                $warning->tst = time();
                $id = $warning->save();
                $numberWarn = Warning::getWarnings($userPeer);
                if ($numberWarn >= $this->peer->getSetting(3)) {
                    Warning::clear($userPeer);
                    $result = $this->vk->messagesRemoveChatUser($this->peer->id, $userPeer->user_id);
                    if (isset($result['response']) && $result['response'] == 1) {
                        $response->message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã, –ø–æ–ª—É—á–∏–≤ $numberWarn –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑ {$this->peer->getSetting(3)}.";
                        $this->removeUserFromPeer($userPeer);
                    }
                    elseif (isset($result['error']) && $result['error']['error_code'] == 15) {
                        $response->message = '–ù–µ –º–æ–≥—É –≤—ã–≥–Ω–∞—Ç—å –∞–¥–º–∏–Ω–∞';
                    }
                } else {
                    if ($id) {
                        $NumberWarn = $this->peer->getSetting(3);
                        $warn = Warning::getWarnings($userPeer);
                        $response->message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª $warn/$NumberWarn!";
                    } else
                        $response->message = '–û—à–∏–±–∫–∞!';
                }
            }
        } else
            $response->message = "–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ";
        return $response;
    }

    public function banAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        $group = $this->getGroupFromMessage($username, $object);
        if ($user->is_dev == 1) {
            $response->message = "–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –°–û–ó–î–ê–¢–ï–õ–Ø –ë–û–¢–ê!";
            return $response;
        }
        $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
        if ($userPeer->haveAccess(Role::IMMUNE_ACCESS)) {
            $response->message = "–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º–µ—é—â–µ–≥–æ –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∫–æ–º–∞–Ω–¥–∞–º!";
            return $response;
        }
        if ($this->userPeer->haveAccess(Role::BAN_ACCESS) || $this->user->is_dev == 1) {
            if ($user !== false) {
                if ($user->isExists()) {
                    $this->userPeer->ban_by_peer = $this->userPeer->ban_by_peer + 1;
                    $this->userPeer->save();
                    $userPeer->deleted = 1;
                    $userPeer->have_ban = 1;
                    $userPeer->save();
                    $this->peer->users_count = $this->peer->users_count - 1;
                    $this->peer->count_kick = $this->peer->count_kick + 1;
                    $this->peer->save();
                    $this->vk->messagesSend($this->peer->id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ –±–µ—Å–µ–¥–µ!');
                    $result = $this->vk->messagesRemoveChatUser($this->peer->id, $userPeer->user_id);
                    if (isset($result['error']) && $result['error']['error_code'] == 15) {
                        $response->message = '–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞';
                    }
                }
            } elseif ($group !== false) {
                if (!$group->isAdmin($this->peer->id)) {
                    $group->setDeleted($this->peer->id);
                    $group->setBan($this->peer->id);
                    $result = $this->vk->messagesRemoveChatUser($this->peer->id, $group->id);
                    if (isset($result['error']) && $result['error']['error_code'] == 15)
                        $response->message = '–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞';
                    else
                        $response->message = '–ì—Ä—É–ø–ø–∞ –∑–∞–±–∞–Ω–µ–Ω–∞ –≤ –±–µ—Å–µ–¥–µ!';
                } else
                    $response->message = "–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
            }
        } else
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        return $response;
    }

    public function kickAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        $group = $this->getGroupFromMessage($username, $object);
        if ($user->is_dev == 1) {
            $response->message = "–ù–µ –º–æ–≥—É –≤—ã–≥–Ω–∞—Ç—å –°–û–ó–î–ê–¢–ï–õ–Ø –ë–û–¢–ê!";
            return $response;
        }
        $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
        if ($userPeer->haveAccess(Role::IMMUNE_ACCESS)) {
            $response->message = "–ù–µ –º–æ–≥—É –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º–µ—é—â–µ–≥–æ –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∫–æ–º–∞–Ω–¥–∞–º!";
            return $response;
        }
        if ($this->userPeer->haveAccess(Role::KICK_ACCESS) || $this->user->is_dev == 1) {
            if ($user !== false) {
                $this->removeUserFromPeer($userPeer);
                $this->vk->messagesSend($this->peer->id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã!');
                $result = $this->vk->messagesRemoveChatUser($this->peer->id, $userPeer->user_id);
                if (isset($result['error']) && $result['error']['error_code'] == 15) {
                    $response->message = '–ù–µ –º–æ–≥—É –≤—ã–≥–Ω–∞—Ç—å –∞–¥–º–∏–Ω–∞';
                }
            } elseif ($group !== false) {
                if (!$group->isAdmin($this->peer->id)) {
                    $group->setDeleted($this->peer->id);
                    $result = $this->vk->messagesRemoveChatUser($this->peer->id, $group->id);
                    if (isset($result['error']) && $result['error']['error_code'] == 15)
                        $response->message = '–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞';
                    else
                        $response->message = '–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–µ—Å–µ–¥—ã!';
                } else
                    $response->message = "–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
            }
        } else
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        return $response;
    }

    public function getOnlineAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $response->message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω—ã –∫ –≤–Ω–∏–º–∞–Ω–∏—é, @online" . PHP_EOL;
        return $response;
    }

    public function muteUserAction($time, $username, $object): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $time_to_mute = $time;
        $user = $this->getUserFromMessage($username, $object);
        if ($user->is_dev == 1) {
            $response->message = "–ù–µ –º–æ–≥—É –∑–∞–≥–ª—É—à–∏—Ç—å –°–û–ó–î–ê–¢–ï–õ–Ø –ë–û–¢–ê!";
            return $response;
        }
        if($this->user->id == $user->id) {
            $response->message = "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–≥–ª—É—à–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!";
            return $response;
        }
        $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
        if ($userPeer->haveAccess(Role::IMMUNE_ACCESS)) {
            $response->message = "–ù–µ –º–æ–≥—É –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º–µ—é—â–µ–≥–æ –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∫–æ–º–∞–Ω–¥–∞–º!";
            return $response;
        }
        if ($this->userPeer->haveAccess(Role::MUTE_ACCESS) || $this->user->is_dev == 1) {
            if ($user !== false) {
                if ($time_to_mute > 0) {
                    if ($this->user->id != $userPeer->user_id) {
                        $userPeer->muted = time() + $time_to_mute;
                        $userPeer->save();
                        $secund = $time_to_mute % 60;
                        $minutes = floor($time_to_mute / 60);
                        $hours = floor($time_to_mute / 3600);
                        $minut = $minutes - $hours * 60;
                        if ($time_to_mute < 60)
                            $this->vk->messagesSend($this->peer->id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω –≤ –±–µ—Å–µ–¥–µ –Ω–∞ $secund c–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.");
                        if ($time_to_mute >= 60 && $time_to_mute < 3600)
                            $this->vk->messagesSend($this->peer->id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω –≤ –±–µ—Å–µ–¥–µ –Ω–∞ $minutes –º–∏–Ω—É—Ç $secund —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.");
                        elseif ($time_to_mute >= 3600)
                            $this->vk->messagesSend($this->peer->id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω –≤ –±–µ—Å–µ–¥–µ –Ω–∞ $hours —á–∞—Å–æ–≤ $minut –º–∏–Ω—É—Ç $secund —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.");
//                            $this->user->createNotification("[id{$userPeer->user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞. –í–ø—Ä–µ–¥—å –Ω–µ —Ö—É–ª–∏–≥–∞–Ω—å—Ç–µ.", $this->peer->id, time() + intval($user_text));
                        $this->userPeer->createCallback('unmuteUser', time() + intval($time_to_mute), ['user_id' => $userPeer->user_id]);
                    }
                } else
                    $response->message = "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ 0 –Ω–µ–ª—å–∑—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –µ–≥–æ –∑–∞–º—É—Ç–∏—Ç—å"
                        . PHP_EOL . "1 —á–∞—Å = 3600"
                        . PHP_EOL . "1 –¥–µ–Ω—å = 86400"
                        . PHP_EOL . "7 –¥–Ω–µ–π = 604800";
            }
        } else
            $response->message = "–í–∞—à —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å—Ç–∞—Ç—É—Å {$this->peer->getSetting(3)}";
        return $response;
    }

    public function removeMuteUserAction($username, $object): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        if($this->user->id == $user->id) {
            $response->message = "–ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –º—É—Ç —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è!";
            return $response;
        }
        if ($this->userPeer->haveAccess(Role::MUTE_ACCESS) || $this->user->is_dev == 1) {
            if ($user !== false) {
                $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
                $userPeer->muted = 0;
                $userPeer->save();
                $this->vk->messagesSend($this->peer->id, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–±—Ä–∞–Ω –º—É—Ç, –æ–Ω –º–æ–∂–µ—Ç —Å–º–µ–ª–æ –ø–∏—Å–∞—Ç—å');
            }
        } else {
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        }
        return $response;
    }

    public function removeWarningAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        if ($user->id == $this->user->id) {
            $response->message = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —Å–µ–±—è! –ù–µ –±—É–¥—å—Ç–µ –±—É–∫–æ–π.';
            return $response;
        }
        if ($this->userPeer->haveAccess(Role::PRED_ACCESS) || ($this->user->is_dev == 1)) {
            $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
            $warning = Warning::GetWarningId($user->id, $this->peer->id);
            if ($warning->isExists()) {
                $warning->delete();
                $warn = Warning::getWarnings($userPeer);
                $is = $warn + 1;
                $response->message = "–°–Ω—è—Ç–æ 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–∑ $is. –û—Å—Ç–∞–ª–æ—Å—å $warn.";
            } else
                $response->message = '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.';
        } else
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        return $response;
    }

    public function allWarningAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $warnings = Warning::getAllWarning($this->peer->id);
        if (!empty($warnings)) {
            $message = $this->render('top/warnings', [
                'warnings' => $warnings,
                'title' => '–ü—Ä–µ–¥—ã –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ:'
            ]);
            $response->message = $message;
        } else
            $response->message = "–£–≤—ã, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ –Ω–µ—Ç –ø—Ä–µ–¥–æ–≤.";
        return $response;
    }

    public function removeBanAction($object, $username): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($username, $object);
        $group = $this->getGroupFromMessage($username, $object);
        if ($this->userPeer->haveAccess(Role::BAN_ACCESS) || ($this->user->is_dev == 1)) {
            if ($user !== false) {
                $userPeer = UserPeer::findsByPeerAndUser($user->id, $this->peer->id);
                if (isset($userPeer)) {
                    $userPeer->have_ban = 0;
                    $userPeer->save();
                    $response->message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω';
                }
            } elseif ($group !== false) {
                if ($this->peer->getSetting(17) == 1) {
                    $group->unsetBan($this->peer->id);
                    $response->message = '–ì—Ä—É–ø–ø–∞ —Ä–∞–∑–±–∞–Ω–µ–Ω–∞';
                }
            }
        } else {
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        }
        return $response;
    }

    public function ChatUrlAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->role_id == Role::MAIN_ADMIN) {
            $result = $this->vk->messagesGetInviteLink($this->peer->id);
            if ($result['response']['link']) {
                $response->message = $result['response']['link'];
                $response->setButton('–ß–∞—Ç—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–∏—Ç—å', '1');
            } elseif ($this->peer->url == '') {
                $response->message = "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—Å—Å—ã–ª–∫—É –∫ —á–∞—Ç—É.";
            } else {
                $response->message = $this->peer->url;
                $response->setButton('–ß–∞—Ç—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–∏—Ç—å', '1');
            }
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }


    public function SetChatUrlAction($url): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->role_id == Role::MAIN_ADMIN) {
            if (preg_match('/(https|http):\/\/vk\.me\/join/', $url)) {
                $this->peer->url = $url;
                $this->peer->save();
                $response->message = "–ß–∞—Ç—Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.";
            } else
                $response->message = "–í–≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.";
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function DeleteChatUrlAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->role_id == Role::MAIN_ADMIN) {
            $this->peer->url = null;
            $this->peer->save();
            $response->message = "–ß–∞—Ç—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.";
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function sleepersAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || ($this->user->is_dev == 1)) {
            $users = UserPeer::getSleepersUsers($this->peer->id);
            if (!empty($users)) {
                $message = $this->render('top/inactive', [
                    'userInfo' => $users,
                    'title' => '–°–ø—è—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:',
                    'timeInactive' => 0
                ]);
                $response->message = $message;
            } else
                $response->message = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–∏—á–∞–ª–∏! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!";
        } else
            $response->message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.";
        return $response;
    }

    public function AddAdminAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
//        if ($this->user->is_dev == 1) {
//            $date = explode(" ", $user_text);
//            $ts = 2000000000 + $date[0];
//            $peer = new Peer($ts);
//            $text = $this->vk->messagesAddChatUser($ts, $this->user->id, '');
//            $response->message = "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–µ—Å–µ–¥—É {$peer->title}";
//        }
//        $response->message = print_r($text,1);
        return $response;
    }

    public function KickDeactivatedAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->haveAccess(Role::KICK_ACCESS)) {
            $count = null;
            $result = $this->vk->messagesGetConversationMembers($this->peer->id);
            foreach ($result['response']['profiles'] as $user) {
                if (isset($user['deactivated']) && !is_null($user['deactivated'])) {
                    $users = UserPeer::findsByPeerAndUser($user['id'], $this->peer->id);
                    $users->deleted = 1;
                    $users->save();
                    $this->peer->users_count = $this->peer->users_count - 1;
                    $this->peer->count_kick = $this->peer->count_kick + 1;
                    $this->peer->save();
                    $count++;
                    $this->vk->messagesRemoveChatUser($this->peer->id, $users->user_id);
                }
            }
            if ($count != null)
                $this->vk->messagesSend($this->peer->id, "–í—Å–µ —Å–æ–±–∞—á–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!");
            else
                $this->vk->messagesSend($this->peer->id, "–ù–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å!");
        } else
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        return $response;
    }

    public function KickLeaversAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->user->is_dev == 1 || $this->userPeer->haveAccess(Role::KICK_ACCESS)) {
            $allUser = [];
            $items = [];
            $users = UserPeer::SelectUsers($this->peer->id);
            $result = $this->vk->messagesGetConversationMembers($this->peer->id);
            foreach ($users as $user) {
                array_push($allUser, $user['user_id']);
            }
            foreach ($result['response']['items'] as $item) {
                array_push($items, $item['member_id']);
            }
            $count = null;
            foreach ($allUser as $user) {
                if (!in_array($user, $items)) {
                    $member = UserPeer::findsByPeerAndUser($user, $this->peer->id);
                    $member->deleted = 1;
                    $member->save();
                    $this->peer->users_count = $this->peer->users_count - 1;
                    $this->peer->count_kick = $this->peer->count_kick + 1;
                    $this->peer->save();
                    $count++;
                    $this->vk->messagesSend($this->peer->id, print_r($user,1));
                    $this->vk->messagesRemoveChatUser($this->peer->id, $user);
                }
            }
            if ($count != null)
                $this->vk->messagesSend($this->peer->id, "–í—Å–µ –≤—ã—à–µ–¥—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã.");
            else
                $this->vk->messagesSend($this->peer->id, "–ù–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å!");
        } else
            $response->message = "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!";
        return $response;
    }

    public function ChatInfoAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev) {
            $days = floor((time() - $this->peer->days) / 86400);
            $count = count(UserPeer::getAdmins($this->peer->id));
            $color = "–ó–µ–ª—ë–Ω—ã–π";
            if ($this->peer->getSetting(18) == 2)
                $color = "–ö—Ä–∞—Å–Ω—ã–π";
            elseif ($this->peer->getSetting(18) == 3)
                $color = "–ë–µ–ª—ã–π";
            elseif ($this->peer->getSetting(18) == 4)
                $color = "–°–∏–Ω–∏–π";
            $countLeave = abs($this->peer->users_count_old - $this->peer->users_count);
            $response->message = "–ë–µ—Å–µ–¥–∞ {$this->peer->title}"
                . PHP_EOL . "Id –±–µ—Å–µ–¥—ã: " . ($this->peer->id - App::$peerStartNumber)
                . PHP_EOL . "–ë—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {$this->peer->users_count_old} –°—Ç–∞–ª–æ: {$this->peer->users_count}"
                . PHP_EOL . "–ê–¥–º–∏–Ω–æ–≤: $count"
                . PHP_EOL . "–ë–µ—Å–µ–¥–µ $days –¥–Ω–µ–π"
                . PHP_EOL . "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–µ–¥—ã (0 –≤—ã–∫–ª, 1 –≤–∫–ª)"
                . PHP_EOL . "–ê–≤—Ç–æ–∫–∏–∫: {$this->peer->getSetting(9)}"
                . PHP_EOL . "–°—Å—ã–ª–∫–∏: {$this->peer->getSetting(10)}"
                . PHP_EOL . "–û—à–∏–±–∫–∏ —á–∞—Ç–∞: {$this->peer->getSetting(16)}"
                . PHP_EOL . "–¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫: $color"
                . PHP_EOL . "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {$this->peer->count_kick}"
                . PHP_EOL . "–í—ã—à–ª–∏: $countLeave";
        } else {
            $response->message = "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã!";
        }
        return $response;
    }

    public function RulesSetAction($rules): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $this->peer->rules = $rules;
            $this->peer->save();
            $response->message = "–ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.";
        } else
            $response->message = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!";
        return $response;
    }

    public function RulesDeletedAction($user_text): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($user_text == '') {
            if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
                $this->peer->rules = null;
                $this->peer->save();
                $response->message = "–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.";
            } else
                if ($this->peer->getSetting(16) == 1)
                    $response->message = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!";
        }
        return $response;
    }

    public function RulesAction($user_text): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($user_text == '')
            if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1)
                if ($this->peer->rules != '')
                    $response->message = "–ü—Ä–∞–≤–∏–ª–∞ –±–µ—Å–µ–¥—ã: " . PHP_EOL . $this->peer->rules;
                else
                    $response->message = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å [text].";
        return $response;
    }

    public function SetHelloMessageAction($hello_message): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
            $this->peer->HelloMessage = $hello_message;
            $this->peer->save();
            $response->message = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.";
        } else
            $response->message = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ!";
        return $response;
    }

    public function HelloMessageDeletedAction($user_text): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($user_text == '') {
            if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1) {
                $this->peer->HelloMessage = null;
                $this->peer->save();
                $response->message = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.";
            } else
                $response->message = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ. –î–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ –ø–∫.";
        }
        return $response;
    }

    public function HelloMessageAction($user_text): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        if ($user_text == '')
            if ($this->userPeer->role_id == Role::MAIN_ADMIN || $this->user->is_dev == 1)
                if ($this->peer->HelloMessage != '')
                    $response->message = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ—Å–µ–¥—ã: " . PHP_EOL . $this->peer->HelloMessage;
                else
                    $response->message = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å [text].";
        return $response;
    }

    public function BanListAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $message = '–ë–∞–Ω –ª–∏—Å—Ç –ø—É—Å—Ç.';
        if ($this->userPeer->haveAccess(Role::BAN_ACCESS) || $this->user->is_dev == 1) {
            $users = UserPeer::SelectIsBan($this->peer->id);
            if (count($users) != 0) {
                $message = $this->render('admin/ban_list', [
                    'peer_id' => $this->peer->id,
                    'title' => "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –≤ –±–µ—Å–µ–¥–µ:",
                    'users' => $users
                ]);
            }
        }
        $response->message = $message;
        return $response;
    }

    public function invitedByAction($object, $user_text): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $user = $this->getUserFromMessage($user_text, $object);
        $id = $user->id;
        $members = $this->vk->messagesGetConversationMembers($this->peer->id)['response']['items'];
        $response->message = print_r($members, 1);
        foreach ($members as $member) {
            if ($member['member_id'] == $id) {
                $inviter = User::findById($member['invited_by']);
                if ($inviter !== false) {
                    $response->message = '–ü—Ä–∏–≥–ª–∞—Å–∏–ª' . (($inviter->sex == 1) ? '–∞ ' : ' ') . $inviter->getFullName();
                } else {
                    $response->message = '–Ø –Ω–µ –∑–Ω–∞—é –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ!';
                }
                return $response;
            }
        }
        $response->message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω!';
        return $response;
    }

    /**
     * @param $userPeer
     */
    public function removeUserFromPeer($userPeer): void
    {
        $this->userPeer->kick_by_peer = $this->userPeer->kick_by_peer + 1;
        $this->userPeer->save();
        $userPeer->deleted = 1;
        $userPeer->save();
        $this->peer->users_count = $this->peer->users_count - 1;
        $this->peer->count_kick = $this->peer->count_kick + 1;
        $this->peer->save();
    }

    public function getAdminsAction(): Response
    {
        $response = new Response();
        $response->peer_id = $this->peer->id;
        $roles = $this->peer->getAdmins();
        $response->message = '';
        foreach ($roles as $role)
        {
            $response->message .= $role['title'].':'.PHP_EOL;
            foreach ($role['users'] as $user)
            {
                $u = User::findById($user['user_id']);
                $response->message .= $u->getFullName().PHP_EOL;
            }
        }
        return $response;
    }
}